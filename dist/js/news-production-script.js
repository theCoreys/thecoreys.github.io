document.addEventListener("DOMContentLoaded",function(){document.getElementById("hamburger").addEventListener("click",function(){e.classList.contains("open")||e.classList.add("open")});const e=document.getElementById("menubar");document.getElementById("close-burger").addEventListener("click",function(){e.classList.remove("open")})});var path=window.location.pathname,page=path.split("/").pop();if("index.html"!=page)var audio=new Audio("../Multimedia/sound/10th_Anniversary.mp3"),on="../dist/images/sound/on.svg",off="../dist/images/sound/off.svg";document.addEventListener("DOMContentLoaded",function(){let e=document.querySelector(".speaker");e.addEventListener("click",function(){audio.paused?(e.setAttribute("src",on),audio.play()):(e.setAttribute("src",off),audio.pause())})});let liveTitle="not set",date="not set",address="not set";function loadJSON(e){let t=new XMLHttpRequest;t.overrideMimeType("application/json"),t.open("GET","../data/oldShows.json",!0),t.onreadystatechange=function(){4==t.readyState&&"200"==t.status&&e(t.responseText)},t.send(null)}function loadJSON(e){let t=new XMLHttpRequest;t.overrideMimeType("application/json"),t.open("GET","../data/upcomingShows.json",!0),t.onreadystatechange=function(){4==t.readyState&&"200"==t.status&&e(t.responseText)},t.send(null)}loadJSON(function(e){let t=JSON.parse(e),n=document.getElementById("live-list");for(i=0;i<t.length;i++){let e,a=document.createElement("li");a.className="linews",e=""==t[i].link?t[i].name:'<a href="'+t[i].link+'" class="list-link">'+t[i].name+"</a>",a.innerHTML=t[i].date+" - "+e+" - "+t[i].address,n.appendChild(a)}}),loadJSON(function(e){let t=JSON.parse(e),n=document.getElementById("upcoming");for(i=0;i<t.length;i++){let e,a=document.createElement("li");a.className="linews",e=""==t[i].link?t[i].name:'<a href="'+t[i].link+'" class="list-link">'+t[i].name+"</a>",a.innerHTML=t[i].date+" - "+e+" - "+t[i].address,n.appendChild(a)}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
