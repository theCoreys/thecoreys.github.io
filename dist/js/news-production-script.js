document.addEventListener("DOMContentLoaded",function(){document.getElementById("hamburger").addEventListener("click",function(){e.classList.contains("open")||e.classList.add("open")});const e=document.getElementById("menubar");document.getElementById("close-burger").addEventListener("click",function(){e.classList.remove("open")})});var path=window.location.pathname,page=path.split("/").pop();if("index.html"!=page)var audio=new Audio("../Multimedia/sound/10th_Anniversary.mp3"),on="../dist/images/sound/on.svg",off="../dist/images/sound/off.svg";document.addEventListener("DOMContentLoaded",function(){let e=document.querySelector(".speaker");e.addEventListener("click",function(){audio.paused?(e.setAttribute("src",on),audio.play()):(e.setAttribute("src",off),audio.pause())})});let liveTitle="not set",date="not set",address="not set";function loadOldShows(e){let t=new XMLHttpRequest;t.overrideMimeType("application/json"),t.open("GET","../data/oldShows.json",!0),t.onreadystatechange=function(){4==t.readyState&&"200"==t.status&&e(t.responseText)},t.send(null)}function loadUpcomingShows(e){let t=new XMLHttpRequest;t.overrideMimeType("application/json"),t.open("GET","../data/upcomingShows.json",!0),t.onreadystatechange=function(){4==t.readyState&&"200"==t.status&&e(t.responseText)},t.send(null)}loadOldShows(function(e){let t=JSON.parse(e);t=t.reverse();let n=document.getElementById("live-list");for(i=0;i<t.length;i++){let e,o=document.createElement("li");o.className="linews",e=""==t[i].link?t[i].name:'<a href="'+t[i].link+'" class="list-link">'+t[i].name+"</a>",o.innerHTML=t[i].date+" - "+e,n.appendChild(o)}}),loadUpcomingShows(function(e){let t=JSON.parse(e);t=t.reverse();let n=document.getElementById("upcoming");for(i=0;i<t.length;i++){let e,o=document.createElement("li");o.className="linews",e=""==t[i].link?t[i].name:'<a href="'+t[i].link+'" class="list-link">'+t[i].name+"</a>",o.innerHTML=t[i].date+" - "+e+" - "+t[i].address,n.appendChild(o)}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lbnUuanMiLCJjb250ZW50TXVzaWNQbGF5ZXIuanMiLCJuZXdzLmpzIl0sIm5hbWVzIjpbImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldEVsZW1lbnRCeUlkIiwibWVudSIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiYWRkIiwicmVtb3ZlIiwicGF0aCIsIndpbmRvdyIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJwYWdlIiwic3BsaXQiLCJwb3AiLCJhdWRpbyIsIkF1ZGlvIiwib24iLCJvZmYiLCJzcGVha2VyIiwicXVlcnlTZWxlY3RvciIsInBhdXNlZCIsInNldEF0dHJpYnV0ZSIsInBsYXkiLCJwYXVzZSIsImxpdmVUaXRsZSIsImRhdGUiLCJhZGRyZXNzIiwibG9hZE9sZFNob3dzIiwiY2FsbGJhY2siLCJ4b2JqIiwiWE1MSHR0cFJlcXVlc3QiLCJvdmVycmlkZU1pbWVUeXBlIiwib3BlbiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXNwb25zZVRleHQiLCJzZW5kIiwibG9hZFVwY29taW5nU2hvd3MiLCJyZXNwb25zZSIsImxpdmVEYXRhIiwiSlNPTiIsInBhcnNlIiwicmV2ZXJzZSIsImxpc3QiLCJpIiwibGVuZ3RoIiwibGlzdExpbmsiLCJsaXN0SXRlbSIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJsaW5rIiwibmFtZSIsImlubmVySFRNTCIsImFwcGVuZENoaWxkIl0sIm1hcHBpbmdzIjoiQUFBQUEsU0FBU0MsaUJBQWlCLG1CQUFvQixXQUM3QkQsU0FBU0UsZUFBZSxhQUM5QkQsaUJBQWlCLFFBQVMsV0FReEJFLEVBQUtDLFVBQVVDLFNBQVMsU0FDekJGLEVBQUtDLFVBQVVFLElBQUksVUFMM0IsTUFBTUgsRUFBT0gsU0FBU0UsZUFBZSxXQVN2QkYsU0FBU0UsZUFBZSxnQkFDaENELGlCQUFpQixRQUFTLFdBQzVCRSxFQUFLQyxVQUFVRyxPQUFPLFlDaEI5QixJQUFJQyxLQUFPQyxPQUFPQyxTQUFTQyxTQUN2QkMsS0FBT0osS0FBS0ssTUFBTSxLQUFLQyxNQUUzQixHQUFTLGNBQU5GLEtBQ0MsSUFBSUcsTUFBUSxJQUFJQyxNQUFNLDRDQUNsQkMsR0FBSyw4QkFDTEMsSUFBTSwrQkFFZGxCLFNBQVNDLGlCQUFpQixtQkFBb0IsV0FFMUMsSUFBSWtCLEVBQVVuQixTQUFTb0IsY0FBYyxZQUNyQ0QsRUFBUWxCLGlCQUFpQixRQUFTLFdBQzFCYyxNQUFNTSxRQUNORixFQUFRRyxhQUFhLE1BQU9MLElBQzVCRixNQUFNUSxTQUVOSixFQUFRRyxhQUFhLE1BQU9KLEtBQzVCSCxNQUFNUyxhQ2pCbEIsSUFBSUMsVUFBWSxVQUVaQyxLQUFPLFVBRVBDLFFBQVUsVUFNZCxTQUFTQyxhQUFhQyxHQUVsQixJQUFJQyxFQUFPLElBQUlDLGVBQ2ZELEVBQUtFLGlCQUFpQixvQkFDdEJGLEVBQUtHLEtBQUssTUFBTyx5QkFBeUIsR0FDMUNILEVBQUtJLG1CQUFxQixXQUNDLEdBQW5CSixFQUFLSyxZQUFrQyxPQUFmTCxFQUFLTSxRQUU3QlAsRUFBU0MsRUFBS08sZUFHdEJQLEVBQUtRLEtBQUssTUFvQ2QsU0FBU0Msa0JBQWtCVixHQUV2QixJQUFJQyxFQUFPLElBQUlDLGVBQ2ZELEVBQUtFLGlCQUFpQixvQkFDdEJGLEVBQUtHLEtBQUssTUFBTyw4QkFBOEIsR0FDL0NILEVBQUtJLG1CQUFxQixXQUNDLEdBQW5CSixFQUFLSyxZQUFrQyxPQUFmTCxFQUFLTSxRQUU3QlAsRUFBU0MsRUFBS08sZUFHdEJQLEVBQUtRLEtBQUssTUExQ2RWLGFBQWEsU0FBVVksR0FFbkIsSUFBSUMsRUFBV0MsS0FBS0MsTUFBTUgsR0FFMUJDLEVBQVdBLEVBQVNHLFVBRXBCLElBQUlDLEVBQU83QyxTQUFTRSxlQUFlLGFBRW5DLElBQUs0QyxFQUFJLEVBQUdBLEVBQUlMLEVBQVNNLE9BQVFELElBQUssQ0FFbEMsSUFJSUUsRUFKQUMsRUFBV2pELFNBQVNrRCxjQUFjLE1BQ3RDRCxFQUFTRSxVQUFZLFNBS2pCSCxFQURvQixJQUFwQlAsRUFBU0ssR0FBR00sS0FDRFgsRUFBU0ssR0FBR08sS0FFWixZQUFjWixFQUFTSyxHQUFHTSxLQUFPLHVCQUF5QlgsRUFBU0ssR0FBR08sS0FBTyxPQUc1RkosRUFBU0ssVUFBWWIsRUFBU0ssR0FBR3BCLEtBQU8sTUFBUXNCLEVBQ2hESCxFQUFLVSxZQUFZTixNQXlCekJWLGtCQUFrQixTQUFVQyxHQUV4QixJQUFJQyxFQUFXQyxLQUFLQyxNQUFNSCxHQUUxQkMsRUFBV0EsRUFBU0csVUFFcEIsSUFBSUMsRUFBTzdDLFNBQVNFLGVBQWUsWUFFbkMsSUFBSzRDLEVBQUksRUFBR0EsRUFBSUwsRUFBU00sT0FBUUQsSUFBSyxDQUVsQyxJQUlJRSxFQUpBQyxFQUFXakQsU0FBU2tELGNBQWMsTUFDdENELEVBQVNFLFVBQVksU0FLakJILEVBRG9CLElBQXBCUCxFQUFTSyxHQUFHTSxLQUNEWCxFQUFTSyxHQUFHTyxLQUVaLFlBQWNaLEVBQVNLLEdBQUdNLEtBQU8sdUJBQXlCWCxFQUFTSyxHQUFHTyxLQUFPLE9BRzVGSixFQUFTSyxVQUFZYixFQUFTSyxHQUFHcEIsS0FBTyxNQUFRc0IsRUFBVyxNQUFRUCxFQUFTSyxHQUFHbkIsUUFDL0VrQixFQUFLVSxZQUFZTiIsImZpbGUiOiJuZXdzLXByb2R1Y3Rpb24tc2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgbGV0IGJ1cmdlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoYW1idXJnZXInKTtcclxuICAgIGJ1cmdlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0b2dnbGVGaWx0ZXJpbmcoKTtcclxuICAgIH0pXHJcblxyXG4gICAgY29uc3QgbWVudSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVudWJhclwiKTtcclxuXHJcbiAgICBmdW5jdGlvbiB0b2dnbGVGaWx0ZXJpbmcoKSB7XHJcbiAgICAgICAgLy9JZiBvcGVuIGNsb3NlIGl0LCBpZiBjbG9zZWQgb3BlbiBpdC5cclxuICAgICAgICBpZiAoIW1lbnUuY2xhc3NMaXN0LmNvbnRhaW5zKCdvcGVuJykpIHtcclxuICAgICAgICAgICAgbWVudS5jbGFzc0xpc3QuYWRkKCdvcGVuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVtcHR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjbG9zZS1idXJnZXJcIik7XHJcbiAgICBlbXB0eS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBtZW51LmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcclxuICAgIH0pXHJcbn0pOyIsIlxyXG52YXIgcGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcclxudmFyIHBhZ2UgPSBwYXRoLnNwbGl0KFwiL1wiKS5wb3AoKTtcclxuXHJcbmlmKHBhZ2UhPVwiaW5kZXguaHRtbFwiKXtcclxuICAgIHZhciBhdWRpbyA9IG5ldyBBdWRpbygnLi4vTXVsdGltZWRpYS9zb3VuZC8xMHRoX0Fubml2ZXJzYXJ5Lm1wMycpO1xyXG4gICAgdmFyIG9uID0gXCIuLi9kaXN0L2ltYWdlcy9zb3VuZC9vbi5zdmdcIjtcclxuICAgIHZhciBvZmYgPSBcIi4uL2Rpc3QvaW1hZ2VzL3NvdW5kL29mZi5zdmdcIjtcclxufVxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBcclxuICAgIGxldCBzcGVha2VyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNwZWFrZXInKTtcclxuICAgIHNwZWFrZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGF1ZGlvLnBhdXNlZCkge1xyXG4gICAgICAgICAgICBzcGVha2VyLnNldEF0dHJpYnV0ZSgnc3JjJywgb24pO1xyXG4gICAgICAgICAgICBhdWRpby5wbGF5KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3BlYWtlci5zZXRBdHRyaWJ1dGUoJ3NyYycsIG9mZik7XHJcbiAgICAgICAgICAgIGF1ZGlvLnBhdXNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufSk7IiwiLy8gVGhlIGZlYXR1cmVkIGxpdmUncyBuYW1lLlxyXG5sZXQgbGl2ZVRpdGxlID0gXCJub3Qgc2V0XCI7XHJcbi8vIFRoZSBmZWF0dXJlZCBsaXZlJ3MgZGF0ZS5cclxubGV0IGRhdGUgPSBcIm5vdCBzZXRcIjtcclxuLy8gVGhlIGZlYXR1cmVkIGxpdmUncyBhZGRyZXNzLlxyXG5sZXQgYWRkcmVzcyA9IFwibm90IHNldFwiO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBhIFhNTEh0dHBSZXF1ZXN0IGFuZCBsb2FkIGFzeW5jaHJvbm91c2x5IHRoZSBjb250ZW50cyBvZiBvbGRTaG93cy5qc29uLlxyXG4gKiBAcGFyYW0geyp9IGNhbGxiYWNrIFxyXG4gKi9cclxuZnVuY3Rpb24gbG9hZE9sZFNob3dzKGNhbGxiYWNrKSB7XHJcblxyXG4gICAgbGV0IHhvYmogPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgIHhvYmoub3ZlcnJpZGVNaW1lVHlwZShcImFwcGxpY2F0aW9uL2pzb25cIik7XHJcbiAgICB4b2JqLm9wZW4oJ0dFVCcsICcuLi9kYXRhL29sZFNob3dzLmpzb24nLCB0cnVlKTtcclxuICAgIHhvYmoub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh4b2JqLnJlYWR5U3RhdGUgPT0gNCAmJiB4b2JqLnN0YXR1cyA9PSBcIjIwMFwiKSB7XHJcbiAgICAgICAgICAgIC8vIFJlcXVpcmVkIHVzZSBvZiBhbiBhbm9ueW1vdXMgY2FsbGJhY2sgYXMgLm9wZW4gd2lsbCBOT1QgcmV0dXJuIGEgdmFsdWUgYnV0IHNpbXBseSByZXR1cm5zIHVuZGVmaW5lZCBpbiBhc3luY2hyb25vdXMgbW9kZS5cclxuICAgICAgICAgICAgY2FsbGJhY2soeG9iai5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB4b2JqLnNlbmQobnVsbCk7XHJcbn1cclxuXHJcblxyXG4vL0Egc2NyaXB0IHRvIGZldGNoIHRoZSBxdWl6IHF1ZXN0aW9ucyBmcm9tIHRoZSBqc29uIGZpbGUsIHNodWZsbGUgdGhlbSwgYWRkIHRoZW0gb25lIGJ5IG9uZSB0byB0aGUgZG9tLCBieSBsaXN0ZW5pbmcgdG8gdGhlIHN1Ym1pdCBldmVudCB0aGUgc3VibWl0IGV2ZW50IG9mIHRoZSBwcmV2aW91cyBvbmUuXHJcbmxvYWRPbGRTaG93cyhmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgIC8vIFBhcnNlIEpTT04gc3RyaW5nIGludG8gb2JqZWN0XHJcbiAgICBsZXQgbGl2ZURhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuICAgIC8vIFJldmVyc2UgdGhlIGFycmF5IHNvIHRoYXQgdGhlaXIgZmlyc3QgbGl2ZSBpcyBkaXNwbGF5ZWQgYXQgdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuLlxyXG4gICAgbGl2ZURhdGEgPSBsaXZlRGF0YS5yZXZlcnNlKCk7XHJcbiAgICAvLyBTZWxlY3QgdGhlIHVuc29ydGVkIGxpc3QgaW4gd2hpY2ggdGhlIGxpdmUgZGF0YSB3aWxsIGJlIGFwcGVuZGVkIHRvLlxyXG4gICAgbGV0IGxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpdmUtbGlzdFwiKTtcclxuXHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGl2ZURhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyBDcmVhdGUgYSBsaXN0IGl0ZW0gZm9yIGEgbGl2ZSBzaG93LlxyXG4gICAgICAgIGxldCBsaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICAgICAgbGlzdEl0ZW0uY2xhc3NOYW1lID0gJ2xpbmV3cyc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBsaW5rIHRvIHRoZSBsaXZlJ3MgcGFnZS5cclxuICAgICAgICBsZXQgbGlzdExpbmtcclxuICAgICAgICBpZiAobGl2ZURhdGFbaV0ubGluayA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGxpc3RMaW5rID0gbGl2ZURhdGFbaV0ubmFtZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsaXN0TGluayA9ICc8YSBocmVmPVwiJyArIGxpdmVEYXRhW2ldLmxpbmsgKyAnXCIgY2xhc3M9XCJsaXN0LWxpbmtcIj4nICsgbGl2ZURhdGFbaV0ubmFtZSArICc8L2E+JztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGlzdEl0ZW0uaW5uZXJIVE1MID0gbGl2ZURhdGFbaV0uZGF0ZSArIFwiIC0gXCIgKyBsaXN0TGluaztcclxuICAgICAgICBsaXN0LmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcclxuICAgIH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBhIFhNTEh0dHBSZXF1ZXN0IGFuZCBsb2FkIGFzeW5jaHJvbm91c2x5IHRoZSBjb250ZW50cyBvZiB1cGNvbWluZ1Nob3dzLmpzb24uXHJcbiAqIEBwYXJhbSB7Kn0gY2FsbGJhY2sgXHJcbiAqL1xyXG5mdW5jdGlvbiBsb2FkVXBjb21pbmdTaG93cyhjYWxsYmFjaykge1xyXG5cclxuICAgIGxldCB4b2JqID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICB4b2JqLm92ZXJyaWRlTWltZVR5cGUoXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xyXG4gICAgeG9iai5vcGVuKCdHRVQnLCAnLi4vZGF0YS91cGNvbWluZ1Nob3dzLmpzb24nLCB0cnVlKTtcclxuICAgIHhvYmoub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh4b2JqLnJlYWR5U3RhdGUgPT0gNCAmJiB4b2JqLnN0YXR1cyA9PSBcIjIwMFwiKSB7XHJcbiAgICAgICAgICAgIC8vIFJlcXVpcmVkIHVzZSBvZiBhbiBhbm9ueW1vdXMgY2FsbGJhY2sgYXMgLm9wZW4gd2lsbCBOT1QgcmV0dXJuIGEgdmFsdWUgYnV0IHNpbXBseSByZXR1cm5zIHVuZGVmaW5lZCBpbiBhc3luY2hyb25vdXMgbW9kZS5cclxuICAgICAgICAgICAgY2FsbGJhY2soeG9iai5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB4b2JqLnNlbmQobnVsbCk7XHJcbn1cclxuXHJcblxyXG4vL0Egc2NyaXB0IHRvIGZldGNoIHRoZSBxdWl6IHF1ZXN0aW9ucyBmcm9tIHRoZSBqc29uIGZpbGUsIHNodWZsbGUgdGhlbSwgYWRkIHRoZW0gb25lIGJ5IG9uZSB0byB0aGUgZG9tLCBieSBsaXN0ZW5pbmcgdG8gdGhlIHN1Ym1pdCBldmVudCB0aGUgc3VibWl0IGV2ZW50IG9mIHRoZSBwcmV2aW91cyBvbmUuXHJcbmxvYWRVcGNvbWluZ1Nob3dzKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgLy8gUGFyc2UgSlNPTiBzdHJpbmcgaW50byBvYmplY3RcclxuICAgIGxldCBsaXZlRGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xyXG4gICAgLy8gUmV2ZXJzZSB0aGUgYXJyYXkgc28gdGhhdCB0aGVpciBmaXJzdCBsaXZlIGlzIGRpc3BsYXllZCBhdCB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4uXHJcbiAgICBsaXZlRGF0YSA9IGxpdmVEYXRhLnJldmVyc2UoKTtcclxuICAgIC8vIFNlbGVjdCB0aGUgdW5zb3J0ZWQgbGlzdCBpbiB3aGljaCB0aGUgbGl2ZSBkYXRhIHdpbGwgYmUgYXBwZW5kZWQgdG8uXHJcbiAgICBsZXQgbGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidXBjb21pbmdcIik7XHJcblxyXG4gICAgZm9yIChpID0gMDsgaSA8IGxpdmVEYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gQ3JlYXRlIGEgbGlzdCBpdGVtIGZvciBhIGxpdmUgc2hvdy5cclxuICAgICAgICBsZXQgbGlzdEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gICAgICAgIGxpc3RJdGVtLmNsYXNzTmFtZSA9ICdsaW5ld3MnO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgdGhlIGxpbmsgdG8gdGhlIGxpdmUncyBwYWdlLlxyXG4gICAgICAgIGxldCBsaXN0TGlua1xyXG4gICAgICAgIGlmIChsaXZlRGF0YVtpXS5saW5rID09IFwiXCIpIHtcclxuICAgICAgICAgICAgbGlzdExpbmsgPSBsaXZlRGF0YVtpXS5uYW1lO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxpc3RMaW5rID0gJzxhIGhyZWY9XCInICsgbGl2ZURhdGFbaV0ubGluayArICdcIiBjbGFzcz1cImxpc3QtbGlua1wiPicgKyBsaXZlRGF0YVtpXS5uYW1lICsgJzwvYT4nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGlzdEl0ZW0uaW5uZXJIVE1MID0gbGl2ZURhdGFbaV0uZGF0ZSArIFwiIC0gXCIgKyBsaXN0TGluayArIFwiIC0gXCIgKyBsaXZlRGF0YVtpXS5hZGRyZXNzO1xyXG4gICAgICAgIGxpc3QuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xyXG4gICAgfVxyXG5cclxufSk7XHJcblxyXG5cclxuLyogR29vZ2xlIG1hcHMgbm93IFJFUVVJUkVTIGEgY3JlZGl0IGNhcmQgYW5kIHdpbGwgd29yayBvbmx5IGZvciBmcmVlIG9ubHkgZm9yIHRoZSBmaXJzdCAkMjAwIG1vbnRobHkgY3JlZGl0LlxyXG4gQWZ0ZXIgdGhhdCB5b3UgcGF5IG9yIHdhaXQgdGlsbCBuZXh0IG1vbnRoLiBcclxuXHJcbiAvLyBHZXQgdGhlIGxhdGVzdCBsaXZlJ3MgdGl0bGUuXHJcbiAgICBsaXZlVGl0bGU9bGl2ZURhdGFbbGl2ZURhdGEubGVuZ3RoLTFdLm5hbWU7XHJcbiAgICBjb25zb2xlLmxvZyhsaXZlVGl0bGUpO1xyXG4gICAgLy8gR2V0IHRoZSBsYXRlc3QgbGl2ZSdzIGRhdGUuXHJcbiAgICBkYXRlPWxpdmVEYXRhW2xpdmVEYXRhLmxlbmd0aC0xXS5kYXRlO1xyXG4gICAgLy8gR2V0IHRoZSBsYXRlc3QgbGl2ZSdzIGFkZHJlc3MuXHJcbiAgICBhZGRyZXNzPWxpdmVEYXRhW2xpdmVEYXRhLmxlbmd0aC0xXS5hZGRyZXNzO1xyXG4gICAgXHJcbiBsZXQgbWFwO1xyXG5cclxuIC8vIENyZWF0ZSBhIG5ldyBibGFuayBhcnJheSBmb3IgYWxsIHRoZSBsaXN0aW5nIG1hcmtlcnMuXHJcbiBsZXQgbWFya2VycyA9IFtdO1xyXG4gbGV0IGxpdmVMYXRMbmc7IC8vIFVzZWQgdG8gc3RvcmUgdGhlIGxhdC1sbmcgb2YgdGhlIGxpdmUncyBsb2NhdGlvbi5cclxuIFxyXG5mdW5jdGlvbiBpbml0TWFwKCkge1xyXG5cclxuICAgIGxldCBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAnKSwge1xyXG4gICAgICAgIHpvb206IDcsXHJcbiAgICAgICAgY2VudGVyOiB7XHJcbiAgICAgICAgICAgIGxhdDogMzguMTI4ODMyNyxcclxuICAgICAgICAgICAgbG5nOiAyMi4yMzgyNDcxXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBsZXQgZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTtcclxuICAgIFxyXG4gICAgXHJcbiAgICAvLyBHZW9jb2RlIGdpdmVuIGFkZHJlc3MgYW5kIHNldCBpdCB0byB0aGUgbGl2ZUxhdExuZyBwYXJhbWV0ZXIuXHJcbiAgICBnZW9jb2RlQWRkcmVzcyhnZW9jb2RlciwgbWFwLCBhZGRyZXNzKTtcclxuICAgIGNvbnNvbGUubG9nKCdUaGUgbGF0LWxuZyBmb3JtYXQgdGFrZW4gZnJvbSB0aGUgZ2VvY29kZUFkZHJlc3MoKSBmdW5jIGlzOicgKyBsaXZlTGF0TG5nKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBzaW5nbGUgbWFya2VyIGZvciB0aGUgbGF0ZXN0IGxpdmUncyBsb2NhdGlvbiBvbiBpbml0aWFsaXplLlxyXG4gICAgbGV0IG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xyXG4gICAgICAgIHBvc2l0aW9uOiBsaXZlTGF0TG5nLFxyXG4gICAgICAgIG1hcDogbWFwLFxyXG4gICAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgICBhbmltYXRpb246IGdvb2dsZS5tYXBzLkFuaW1hdGlvbi5EUk9QLFxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgc2luZ2xlIGluZm93aW5kb3cgdGhhdCB3aWxsIGFwcGVhciBvbiB0aGUgbWFya2VyLlxyXG4gICAgbGV0IGxhcmdlSW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KCk7XHJcblxyXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBwb3B1bGF0ZXMgdGhlIGluZm93aW5kb3cgd2hlbiB0aGUgbWFya2VyIGlzIGNsaWNrZWQuXHJcbiAgICBmdW5jdGlvbiBwb3B1bGF0ZUluZm9XaW5kb3cobWFya2VyLCBpbmZvd2luZG93KSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgdG8gbWFrZSBzdXJlIHRoZSBpbmZvd2luZG93IGlzIG5vdCBhbHJlYWR5IG9wZW5lZCBvbiB0aGlzIG1hcmtlci5cclxuICAgICAgICBpZiAoaW5mb3dpbmRvdy5tYXJrZXIgIT0gbWFya2VyKSB7XHJcbiAgICAgICAgICAgIC8vIENsZWFyIHRoZSBpbmZvd2luZG93IGNvbnRlbnQgdG8gZ2l2ZSB0aGUgc3RyZWV0dmlldyB0aW1lIHRvIGxvYWQuXHJcbiAgICAgICAgICAgIC8vaW5mb3dpbmRvdy5zZXRDb250ZW50KCcnKTtcclxuICAgICAgICAgICAgaW5mb3dpbmRvdy5tYXJrZXIgPSBtYXJrZXI7XHJcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgbWFya2VyIHByb3BlcnR5IGlzIGNsZWFyZWQgaWYgdGhlIGluZm93aW5kb3cgaXMgY2xvc2VkLlxyXG4gICAgICAgICAgICBpbmZvd2luZG93LmFkZExpc3RlbmVyKCdjbG9zZWNsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5tYXJrZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbGV0IHN0cmVldFZpZXdTZXJ2aWNlID0gbmV3IGdvb2dsZS5tYXBzLlN0cmVldFZpZXdTZXJ2aWNlKCk7XHJcbiAgICAgICAgICAgIGxldCByYWRpdXMgPSAxNTA7XHJcbiAgICAgICAgICAgIC8vIEluIGNhc2UgdGhlIHN0YXR1cyBpcyBPSywgd2hpY2ggbWVhbnMgdGhlIHBhbm8gd2FzIGZvdW5kLCBjb21wdXRlIHRoZVxyXG4gICAgICAgICAgICAvLyBwb3NpdGlvbiBvZiB0aGUgc3RyZWV0dmlldyBpbWFnZSwgdGhlbiBjYWxjdWxhdGUgdGhlIGhlYWRpbmcsIHRoZW4gZ2V0IGFcclxuICAgICAgICAgICAgLy8gcGFub3JhbWEgZnJvbSB0aGF0IGFuZCBzZXQgdGhlIG9wdGlvbnNcclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0U3RyZWV0VmlldyhkYXRhLCBzdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuU3RyZWV0Vmlld1N0YXR1cy5PSykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZWFyU3RyZWV0Vmlld0xvY2F0aW9uID0gZGF0YS5sb2NhdGlvbi5sYXRMbmc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBoZWFkaW5nID0gZ29vZ2xlLm1hcHMuZ2VvbWV0cnkuc3BoZXJpY2FsLmNvbXB1dGVIZWFkaW5nKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWFyU3RyZWV0Vmlld0xvY2F0aW9uLCBtYXJrZXIucG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGluZm93aW5kb3cuc2V0Q29udGVudCgnPGRpdj4nICsgbWFya2VyLnRpdGxlICsgJzwvZGl2PjxkaXYgaWQ9XCJwYW5vXCI+PC9kaXY+Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhbm9yYW1hT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IG5lYXJTdHJlZXRWaWV3TG9jYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvdjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGluZzogaGVhZGluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpdGNoOiAzMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcGFub3JhbWEgPSBuZXcgZ29vZ2xlLm1hcHMuU3RyZWV0Vmlld1Bhbm9yYW1hKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYW5vJyksIHBhbm9yYW1hT3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocGFub3JhbWEpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmZvd2luZG93LnNldENvbnRlbnQoJzxkaXY+JyArIG1hcmtlci50aXRsZSArICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXY+Tm8gU3RyZWV0IFZpZXcgRm91bmQ8L2Rpdj4nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBVc2Ugc3RyZWV0dmlldyBzZXJ2aWNlIHRvIGdldCB0aGUgY2xvc2VzdCBzdHJlZXR2aWV3IGltYWdlIHdpdGhpblxyXG4gICAgICAgICAgICAvLyA1MCBtZXRlcnMgb2YgdGhlIG1hcmtlcnMgcG9zaXRpb25cclxuICAgICAgICAgICAgc3RyZWV0Vmlld1NlcnZpY2UuZ2V0UGFub3JhbWFCeUxvY2F0aW9uKG1hcmtlci5wb3NpdGlvbiwgcmFkaXVzLCBnZXRTdHJlZXRWaWV3KTtcclxuICAgICAgICAgICAgLy8gT3BlbiB0aGUgaW5mb3dpbmRvdyBvbiB0aGUgY29ycmVjdCBtYXJrZXIuXHJcbiAgICAgICAgICAgIGluZm93aW5kb3cub3BlbihtYXAsIG1hcmtlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vICBjcmVhdGUgYW4gRVZFTlQgTElTVEVORVIgc28gdGhhdCB0aGUgaW5mb3dpbmRvdyBvcGVucyB3aGVuXHJcbiAgICAvLyB0aGUgbWFya2VyIGlzIGNsaWNrZWQhXHJcbiAgICBtYXJrZXIuYWRkTGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHBvcHVsYXRlSW5mb1dpbmRvdyh0aGlzLCBsYXJnZUluZm93aW5kb3cpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlb2NvZGVBZGRyZXNzKGdlb2NvZGVyLCByZXN1bHRzTWFwLCBhZGRyZXNzKSB7XHJcbiAgICBnZW9jb2Rlci5nZW9jb2RlKHtcclxuICAgICAgICAnYWRkcmVzcyc6IGFkZHJlc3NcclxuICAgIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHtcclxuICAgICAgICBpZiAoc3RhdHVzID09PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PSykge1xyXG4gICAgICAgICAgICByZXN1bHRzTWFwLnNldENlbnRlcihyZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uKTtcclxuICAgICAgICAgICAgLy8gU2hvdyB0aGUgZmlyc3QgcmVzdWx0J3MgZm9ybWF0dGVkIGFkZHJlc3MsIGFuZCBMT0NBVElPTi5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJUaGUgRm9ybWF0dGVkIEFkZHJlc3MgaXM6XCIgKyByZXN1bHRzWzBdLmZvcm1hdHRlZF9hZGRyZXNzKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJUaGUgTG9jYXRpb24gaXNcIiArIHJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb24pO1xyXG4gICAgICAgICAgICBsaXZlTGF0TG5nID0gcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhbGVydCgnR2VvY29kZSB3YXMgbm90IHN1Y2Nlc3NmdWwgZm9yIHRoZSBmb2xsb3dpbmcgcmVhc29uOiAnICsgc3RhdHVzKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG4qLyJdfQ==
