document.addEventListener("DOMContentLoaded",function(){document.getElementById("hamburger").addEventListener("click",function(){e.classList.contains("open")||e.classList.add("open")});const e=document.getElementById("menubar");document.getElementById("close-burger").addEventListener("click",function(){e.classList.remove("open")})});var path=window.location.pathname,page=path.split("/").pop();if("index.html"!=page)var audio=new Audio("../Multimedia/sound/10th_Anniversary.mp3"),on="../dist/images/sound/on.svg",off="../dist/images/sound/off.svg";document.addEventListener("DOMContentLoaded",function(){let e=document.querySelector(".speaker");e.addEventListener("click",function(){audio.paused?(e.setAttribute("src",on),audio.play()):(e.setAttribute("src",off),audio.pause())})});let liveTitle="not set",date="not set",address="not set";function loadOldShows(e){let n=new XMLHttpRequest;n.overrideMimeType("application/json"),n.open("GET","../data/oldShows.json",!0),n.onreadystatechange=function(){4==n.readyState&&"200"==n.status&&e(n.responseText)},n.send(null)}function loadUpcomingShows(e){let n=new XMLHttpRequest;n.overrideMimeType("application/json"),n.open("GET","../data/upcomingShows.json",!0),n.onreadystatechange=function(){4==n.readyState&&"200"==n.status&&e(n.responseText)},n.send(null)}loadOldShows(function(e){let n=JSON.parse(e),t=document.getElementById("live-list");for(i=0;i<n.length;i++){let e,a=document.createElement("li");a.className="linews",e=""==n[i].link?n[i].name:'<a href="'+n[i].link+'" class="list-link">'+n[i].name+"</a>",a.innerHTML=n[i].date+" - "+e+" - "+n[i].address,t.appendChild(a)}}),loadUpcomingShows(function(e){let n=JSON.parse(e),t=document.getElementById("upcoming");for(i=0;i<n.length;i++){let e,a=document.createElement("li");a.className="linews",e=""==n[i].link?n[i].name:'<a href="'+n[i].link+'" class="list-link">'+n[i].name+"</a>",a.innerHTML=n[i].date+" - "+e+" - "+n[i].address,t.appendChild(a)}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
